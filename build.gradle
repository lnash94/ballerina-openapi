/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
plugins {

//    id 'com.gradle.build-scan' version '2.1'
    id 'maven-publish'
    id "com.github.spotbugs" version "4.0.5"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "de.undercouch.download" version "4.0.4"
    id "net.researchgate.release" version "2.8.0"
    id 'org.javamodularity.moduleplugin' version '1.7.0' apply false
    id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.5"

}

apply plugin: 'java'
apply plugin: "com.github.spotbugs"
apply plugin: 'jacoco'
apply plugin: "org.javamodularity.moduleplugin"

ext.ballerinaLangVersion = project.ballerinaLangVersion
ext.testngVersion = project.testngVersion
ext.slf4jVersion = project.slf4jVersion

ext.stdlibIoVersion = project.stdlibIoVersion
ext.stdlibLogVersion = project.stdlibLogVersion
ext.stdlibMimeVersion = project.stdlibMimeVersion
ext.stdlibAuthVersion = project.stdlibAuthVersion
ext.stdlibCacheVersion = project.stdlibCacheVersion
ext.stdlibTimeVersion = project.stdlibTimeVersion
ext.stdlibCryptoVersion = project.stdlibCryptoVersion
ext.stdlibTaskVersion = project.stdlibTaskVersion
ext.stdlibReflectVersion = project.stdlibReflectVersion
ext.stdlibFileVersion = project.stdlibFileVersion
ext.stdlibRuntimeVersion = project.stdlibRuntimeVersion

allprojects {
    group = 'org.ballerinalang'
    version = project.version
    apply plugin: 'checkstyle'
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/releases/'
        }

//        maven {
//            url = 'https://maven.wso2.org/nexus/content/repositories/snapshots/'
//        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/groups/wso2-public/'
        }

        maven {
            url = 'https://maven.wso2.org/nexus/content/repositories/orgballerinalang-1614'
        }

        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-grpc'
        }
        //stdlib module dependencies
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-io'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-runtime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-time'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-crypto'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-auth'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-cache'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-stringutils'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-log'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-system'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-config'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-http'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-mime'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-task'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-reflect'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/ballerina-lang'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/module-ballerina-file'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }

        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    // Add checkstyles
    checkstyle {
        toolVersion '8.16'
        configFile = file("$rootProject.projectDir/config/checkstyle/checkstyle.xml")
    }

    def excludePattern = '**/module-info.java'
    tasks.withType(Checkstyle) {
        configFile file("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        exclude excludePattern
    }

//    afterEvaluate {
//        check.dependsOn('checkstyle')
//    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: "io.swagger.core.v3.swagger-gradle-plugin"
    configurations {
        ballerinaStdLibs
    }
    dependencies {

        /* Standard libraries */
        ballerinaStdLibs "org.ballerinalang:io-ballerina:${stdlibIoVersion}"
        ballerinaStdLibs "org.ballerinalang:runtime-ballerina:${stdlibRuntimeVersion}"
        ballerinaStdLibs "org.ballerinalang:http-ballerina:${stdlibHttpVersion}"
        ballerinaStdLibs "org.ballerinalang:log-ballerina:${stdlibLogVersion}"
        ballerinaStdLibs "org.ballerinalang:system-ballerina:${stdlibSystemVersion}"
        ballerinaStdLibs "org.ballerinalang:config-ballerina:${stdlibConfigVersion}"
        ballerinaStdLibs "org.ballerinalang:mime-ballerina:${stdlibMimeVersion}"
        ballerinaStdLibs "org.ballerinalang:stringutils-ballerina:${stdlibStringUtilsVersion}"
        ballerinaStdLibs "org.ballerinalang:crypto-ballerina:${stdlibCryptoVersion}"
        ballerinaStdLibs "org.ballerinalang:auth-ballerina:${stdlibAuthVersion}"
        ballerinaStdLibs "org.ballerinalang:time-ballerina:${stdlibTimeVersion}"
        ballerinaStdLibs "org.ballerinalang:cache-ballerina:${stdlibCacheVersion}"
        ballerinaStdLibs "org.ballerinalang:task-ballerina:${stdlibTaskVersion}"
        ballerinaStdLibs "org.ballerinalang:reflect-ballerina:${stdlibReflectVersion}"
        ballerinaStdLibs "org.ballerinalang:file-ballerina:${stdlibFileVersion}"

    }
}

def moduleVersion = project.version
if (moduleVersion.indexOf('-') != -1) {
    moduleVersion = moduleVersion.substring(0, moduleVersion.indexOf('-'))
}
release {
    failOnPublishNeeded = false
        // Disable check snapshots temporarily
     buildTasks = ['buildProject']
    versionPropertyFile = 'gradle.properties'
    tagTemplate = 'v${version}'
    git {
            // To release from any branch
         requireBranch = "release-${moduleVersion}"
        pushToRemote = 'origin'
    }
}

task buildProject {
    dependsOn('module-ballerina-openapi:build')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

//spotbugsMain {
//    it.effort "max"
//    it.reportLevel "low"
//    it.reports {
//        xml.enabled false
//        html.enabled true
//    }
//    def excludeFile = file('spotbugs-exclude.xml')
//    if(excludeFile.exists()) {
//        it.excludeFilter = excludeFile
//    }
//}

//spotbugsTest {
//    it.enabled = false
//}

//test {
//    testLogging {
//        // Make sure output from standard out or error is shown in Gradle output.
//        showStackTraces = true
//        showStandardStreams = true
//    }
//    systemProperty "ballerina.home", "$buildDir"
//    systemProperty "org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog"
//    testLogging {
//        events "failed"
//        exceptionFormat "full"
//    }
//}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task createJavadoc(type: Javadoc) {
    source = sourceSets.main.java
    classpath = sourceSets.main.compileClasspath
    failOnError true
    options.addStringOption('Xwerror', '-quiet')
}

check {
    dependsOn createJavadoc
}

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/coverage-reports/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        html.enabled = true
        csv.enabled = true
        xml.destination = new File("${buildDir}/reports/jacoco/report.xml")
        html.destination = new File("${buildDir}/reports/jacoco/report.html")
        csv.destination = new File("${buildDir}/reports/jacoco/report.csv")
    }

    onlyIf = {
        true
    }
}
buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}
//buildPlugin.dependsOn check