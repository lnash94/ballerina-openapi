/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Openapi Ballerina Integration Tests'

configurations {
    jbalTools
}

dependencies {
//    compile group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':module-ballerina-openapi')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}
def packageName = "openapi"
def packageOrg = "ballerina"

def resourceOpenAPIPath = file("$project.projectDir/moduel-ballerina-openapi/build/")
def targetOpenAPIPath = file("${buildDir}/target/extracted-distributions/${packageName}-${packageOrg}-zip")


task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}


def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def tomlVersion = project.version.split("-")[0]
def originalConfig = ballerinaConfigFile.text

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
        def stdlibDependentStringutilsVersion = project.stdlibStringUtilsVersion.split("-")[0]
        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
        def stdlibDependentSystemVersion = project.stdlibSystemVersion.split("-")[0]
        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]
        def stdlibDependentOpenAPIVersion = project.version.split("-")[0]


        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.stringutils.version@", stdlibDependentStringutilsVersion)
        newConfig = newConfig.replace("@stdlib.config.version@", stdlibDependentConfigVersion)
        newConfig = newConfig.replace("@stdlib.system.version@", stdlibDependentSystemVersion)
        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newConfig = newConfig.replace("@stdlib.openapi.version@", stdlibDependentOpenAPIVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaIntegrationTests {
    inputs.dir file(project.projectDir)
//    dependsOn(":openapi-cli:build")
    dependsOn(":openapi-validator:build")
    dependsOn(":module-ballerina-openapi:build")
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)
    dependsOn(copyStdlibs)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    //copy openapi caches
    copy {
        from file("$resourceOpenAPIPath/cache_parent/cache")
        into file("$targetOpenAPIPath/cache")
    }
    //copy openapi balo
    copy {
        from file("$resourceOpenAPIPath/cache_parent/balo")
        into file("$targetOpenAPIPath/balo")
    }
    //copy openapi libs
    copy {
        from file("$resourceOpenAPIPath/lib_parent/libs")
        into file(project.projectDir.absolutePath +
                """/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-
${ballerinaLangVersion}/bre/lib""")
    }

    //copy openapi cache
    copy {
        from file("$resourceOpenAPIPath/cache_parent/cache/ballerina")
        into file(project.projectDir.absolutePath +
                """/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-
${ballerinaLangVersion}/repo/cache/balerina""")
    }

    //copy openapi balo
    copy {
        from file("$resourceOpenAPIPath/cache_parent/balo/ballerina")
        into file(project.projectDir.absolutePath +
                """/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-
${ballerinaLangVersion}/repo/balo/balerina""")
    }

    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --bal_exec_path=${distributionBinPath}/ballerina"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina test --bal_exec_path=${distributionBinPath}/ballerina"
            }
        }
    }
}

test {
    dependsOn(ballerinaIntegrationTests)
}
//ballerinaBuild.dependsOn ":ballerina-to-openapi-generator:build"
ballerinaIntegrationTests.dependsOn ":openapi-cli:build"
ballerinaIntegrationTests.dependsOn ":openapi-validator:build"
//ballerinaIntegrationTests.dependsOn ":module-ballerina-openapi:publish"
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
ballerinaIntegrationTests.dependsOn copyStdlibs
ballerinaIntegrationTests.dependsOn updateTomlFile
build.dependsOn test
