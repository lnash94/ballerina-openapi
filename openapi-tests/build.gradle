/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Openapi Ballerina Integration Tests'

configurations {
    jbalTools
}

dependencies {
//    compile group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':module-ballerina-openapi')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def tomlVersion = project.version.split("-")[0]
def originalConfig = ballerinaConfigFile.text

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
        def stdlibDependentStringutilsVersion = project.stdlibStringUtilsVersion.split("-")[0]
        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
        def stdlibDependentSystemVersion = project.stdlibSystemVersion.split("-")[0]

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.stringutils.version@", stdlibDependentStringutilsVersion)
        newConfig = newConfig.replace("@stdlib.config.version@", stdlibDependentConfigVersion)
        newConfig = newConfig.replace("@stdlib.system.version@", stdlibDependentSystemVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaIntegrationTests {
    inputs.dir file(project.projectDir)
//    dependsOn(":openapi-cli:build")
    dependsOn(":openapi-validator:build")
    dependsOn(":module-ballerina-openapi:build")
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)
    dependsOn(copyStdlibs)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)
    doLast {
        def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --bal_exec_path=${distributionBinPath}/ballerina"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/ballerina test --bal_exec_path=${distributionBinPath}/ballerina"
            }
        }
    }
}

test {
    dependsOn(ballerinaIntegrationTests)
}
////ballerinaBuild.dependsOn ":ballerina-to-openapi-generator:build"
ballerinaIntegrationTests.dependsOn ":openapi-cli:build"
ballerinaIntegrationTests.dependsOn ":openapi-validator:build"
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
ballerinaIntegrationTests.dependsOn copyStdlibs
ballerinaIntegrationTests.dependsOn updateTomlFile
build.dependsOn test

//import org.apache.tools.ant.taskdefs.condition.Os
//description = 'Ballerina - OpenAPI Ballerina Generator'
//
//configurations {
//    jbalTools
//}
//
//dependencies {
//    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
//        transitive = false
//    }
//    compile project(':openapi-validator')
//    compile project(':openapi-cli')
//
//}
//
//clean {
//    delete "$project.projectDir/target"
//    delete "$project.projectDir/Ballerina.lock"
//}
//
//jar {
//    manifest {
//        attributes('Implementation-Title': project.name,
//                'Implementation-Version': project.version)
//    }
//}
//
//def moduleName = "integration_tests"
//def moduleOrg = "ballerina"
////def ballerinaConfigFile = new File("$project.projectDir/src/main/ballerina/Ballerina.toml")
//def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
//def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
//def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
//def artifactLibParent = file("$project.projectDir/build/lib_parent/")
//def tomlVersion = project.version.split("-")[0]
//def targetBallerinaJar = file("$project.projectDir/target/caches/jar_cache/${moduleOrg}/${moduleName}/${tomlVersion}/${moduleOrg}-${moduleName}-${tomlVersion}.jar")
//def targetNativeJar = file("""$project.rootDir/${moduleName}-validator/build/libs/${moduleName}-validator-${project.version}.jar""")
//def targetOpenApiCliJar = file("$project.rootDir/openapi-cli/build/libs/openapi-cli-${project.version}.jar")
//def targetModuleOpenApiCliJar = file("$project.rootDir/module-ballerina-openapi/build/libs/module-ballerina-openapi-${project.version}.jar")
//def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
//def distributionBinPath = distributionPath + "/bin"
//def originalConfig = ballerinaConfigFile.text
//
//task unpackJballerinaTools(type: Copy) {
//    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
//        from zipTree(artifact.getFile())
//        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
//    }
//}
//
//task unpackStdLibs() {
//    doLast {
//        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
//            copy {
//                from project.zipTree(artifact.getFile())
//                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
//            }
//        }
//    }
//}
//
//
//task copyStdlibs(type: Copy) {
//    dependsOn(unpackStdLibs)
//
//    into distributionPath
//    /* Standard Libraries */
//    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
//        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
//        into("bir-cache/") {
//            from "${artifactExtractedPath}/caches/bir"
//        }
//        into("bre/lib/") {
//            from "${artifactExtractedPath}/libs"
//        }
//        into("docs/") {
//            from "${artifactExtractedPath}/docs"
//        }
//        // pack to new cache
//        into("cache/bir/") {
//            from "${artifactExtractedPath}/caches/bir"
//        }
//        into("cache/balo/") {
//            from "${artifactExtractedPath}/caches/balo"
//        }
//        into("cache/jar/") {
//            from "${artifactExtractedPath}/caches/jar"
//        }
//    }
//}
//
//task updateTomlFile {
//    doLast {
//        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
//        def stdlibDependentStringutilsVersion = project.stdlibStringUtilsVersion.split("-")[0]
//        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
//        def stdlibDependentSystemVersion = project.stdlibSystemVersion.split("-")[0]
//        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]
//        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
//
//        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
//        newConfig = newConfig.replace("@toml.version@", tomlVersion)
//        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
//        newConfig = newConfig.replace("@stdlib.stringutils.version@", stdlibDependentStringutilsVersion)
//        newConfig = newConfig.replace("@stdlib.config.version@", stdlibDependentConfigVersion)
//        newConfig = newConfig.replace("@stdlib.system.version@", stdlibDependentSystemVersion)
//        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
//        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
//        ballerinaConfigFile.text = newConfig
//    }
//}
//
//task revertTomlFile {
//    doLast {
//        ballerinaConfigFile.text = originalConfig
//    }
//}
//
//task ballerinaBuild {
//    inputs.dir file(project.projectDir)
////    dependsOn(":openapi-cli:build")
//    dependsOn(":openapi-validator:build")
//    dependsOn(":module-ballerina-openapi:build")
//    dependsOn(unpackJballerinaTools)
//    dependsOn(unpackStdLibs)
//    dependsOn(copyStdlibs)
//    dependsOn(updateTomlFile)
//    dependsOn(test)
//    finalizedBy(revertTomlFile)
//
//    doLast {
//        copy {
//            from file("$project.projectDir/Ballerina.toml")
//            into file("$artifactCacheParent/caches/bir/${moduleOrg}/${moduleName}/${tomlVersion}")
//        }
//        copy {
//            from file("$project.projectDir/Ballerina.toml")
//            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
//        }
//        copy {
//            from file("$project.projectDir/Ballerina.toml")
//            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
//        }
//        copy {
//            from file("$project.projectDir/target/caches/bir_cache")
//            into file("$artifactCacheParent/caches/bir")
//        }
//        copy {
//            from file("$project.projectDir/target/balo")
//            into file("$artifactCacheParent/caches/balo/${moduleOrg}/${moduleName}/${tomlVersion}")
//        }
//        copy {
//            from targetBallerinaJar
//            into file("$artifactCacheParent/caches/jar/${moduleOrg}/${moduleName}/${tomlVersion}")
//        }
//
//        copy {
//            from targetBallerinaJar
//            into file("$artifactLibParent/libs")
//        }
//
//        copy {
//            from targetNativeJar
//            into file("$artifactLibParent/libs")
//        }
//
//        copy {
//            from targetOpenApiCliJar
//            into file("$artifactLibParent/libs")
//        }
//
//        copy {
//            from targetModuleOpenApiCliJar
//            into file("$artifactLibParent/libs")
//        }
//    }
//
//    outputs.dir artifactCacheParent
//    outputs.dir artifactBallerinaDocs
//    outputs.dir artifactLibParent
//}
//
//task ballerinaIntegrationTests {
//    inputs.dir file(project.projectDir)
////    dependsOn(":openapi-validator:build")
//    dependsOn(":module-ballerina-openapi:build")
//    finalizedBy(revertTomlFile)
//    doLast {
//        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
//        def stdlibDependentStringutilsVersion = project.stdlibStringUtilsVersion.split("-")[0]
//        def stdlibDependentConfigVersion = project.stdlibConfigVersion.split("-")[0]
//        def stdlibDependentSystemVersion = project.stdlibSystemVersion.split("-")[0]
//        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]
//        def stdlibDependentHttpVersion = project.stdlibHttpVersion.split("-")[0]
//
//        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
//        newConfig = newConfig.replace("@toml.version@", tomlVersion)
//        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
//        newConfig = newConfig.replace("@stdlib.http.version@", stdlibDependentHttpVersion)
//
//        ballerinaConfigFile.text = newConfig
//
//        copy {
//            from file("$project.rootDir/module-ballerina-openapi/build/lib_parent/libs/openapi-validator-${project.version}.jar")
//            into file(project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bre/lib")
//        }
//        copy {
//            from file("$project.projectDir/build/lib_parent/libs/openapi-cli-${project.version}.jar")
//            into file(project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bre/lib")
//        }
//        copy {
//            from file("$project.rootDir/module-ballerina-openapi/build/lib_parent/libs/ballerina-openapi-${tomlVersion}.jar")
//            into file(project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bre/lib")
//        }
//        copy {
//            from file("$project.rootDir/module-ballerina-openapi/build/cache_parent/caches/bir/ballerina/openapi/${tomlVersion}/openapi.bir")
//            into file(project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bir-cache/ballerina/openapi/${tomlVersion}")
//        }
//        copy {
//            from file("$project.rootDir/module-ballerina-openapi/build/cache_parent/caches/bir/ballerina/openapi/${tomlVersion}/Ballerina.toml")
//            into file(project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bir-cache/ballerina/openapi/${tomlVersion}")
//        }
//        exec {
//            workingDir project.projectDir
//            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
//            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --bal_exec_path=${distributionBinPath}/ballerina"
//            } else {
//                commandLine 'sh', '-c', "$distributionBinPath/ballerina test --bal_exec_path=${distributionBinPath}/ballerina"
//            }
//        }
//    }
//}
//
////ballerinaBuild.dependsOn ":ballerina-to-openapi-generator:build"
//ballerinaBuild.dependsOn ":openapi-cli:build"
//ballerinaBuild.dependsOn ":openapi-validator:build"
//unpackStdLibs.dependsOn unpackJballerinaTools
//copyStdlibs.dependsOn unpackStdLibs
//updateTomlFile.dependsOn copyStdlibs
//ballerinaBuild.dependsOn updateTomlFile
//ballerinaIntegrationTests.dependsOn(ballerinaBuild)
//build.dependsOn(ballerinaIntegrationTests)
