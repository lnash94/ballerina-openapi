/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
import org.apache.tools.ant.taskdefs.condition.Os
description = 'Ballerina - OpenAPI Ballerina Generator'

configurations {
    jbalTools
    externalJars
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    implementation project(':openapi-validator')
    implementation project(':openapi-cli')

    externalJars (group: 'io.swagger.parser.v3', name: 'swagger-parser-core', version: '2.0.24') {
        transitive = false
    }

    externalJars (group: 'io.swagger.parser.v3', name: 'swagger-parser-v3', version: '2.0.24') {
        transitive = false
    }

    externalJars (group: 'io.swagger.core.v3', name: 'swagger-models', version: '2.1.6') {
        transitive = false
    }

    externalJars (group: 'io.swagger.core.v3', name: 'swagger-core', version: '2.1.6') {
        transitive = false
    }

//    externalJars (group: 'io.swagger.parser.v3', name: 'swagger-parser', version: '2.0.24') {
//        transitive = false
//    }

    //ballerina-to-openapi
//    externalJars (group: 'io.swagger', name: 'swagger-models', version: '1.5.3') {
//        transitive = false
//    }
//
//    externalJars (group: 'io.swagger', name: 'swagger-annotations', version: '1.5.3') {
//        transitive = false
//    }
//
//    externalJars (group: 'io.swagger', name: 'swagger-core', version: '1.5.3') {
//        transitive = false
//    }
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

def packageName = "openapi"
def packageOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = project.version.split("-")[0]
def targetNativeJar = file("""$project.rootDir/${packageName}-validator/build/libs/${packageName}-validator-${project.version}.jar""")
def targetOpenApiCliJar = file("$project.rootDir/openapi-cli/build/libs/openapi-cli-${project.version}.jar")
def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/balo") {
            from "${artifactExtractedPath}/balo/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = project.stdlibIoVersion.split("-")[0]
        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)
    dependsOn(":openapi-cli:build")
    dependsOn(":openapi-validator:build")
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)
    dependsOn(copyStdlibs)
    dependsOn(updateTomlFile)
    dependsOn(test)
//    dependsOn(ballerinaTest)
    finalizedBy(revertTomlFile)

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat build --skip-tests -c && exit " +
                        "%%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "${distributionBinPath}"+'/bal build --skip-tests -c'
            }
        }

        copy {
            from file("$project.projectDir/target/balo")
            into file("$artifactCacheParent/balo/${packageOrg}/${packageName}/${tomlVersion}")
        }

        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        copy {
            from targetNativeJar
            into file("$artifactLibParent/libs")
        }

        copy {
            from targetOpenApiCliJar
            into file("$artifactLibParent/libs")
        }
        //copy external jar
        copy {
            from configurations.externalJars
            into file("$artifactLibParent/libs")
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc  && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc "
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }

        ballerinaConfigFile.text = originalConfig
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task ballerinaTest {
    dependsOn(":openapi-cli:build")
    dependsOn(":openapi-validator:build")
    dependsOn(unpackJballerinaTools)
    dependsOn(unpackStdLibs)
    dependsOn(copyStdlibs)
    dependsOn(updateTomlFile)
    finalizedBy(revertTomlFile)

    def debugParams = ""
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            environment "STDLIB_VERSION", tomlVersion
//            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//                commandLine 'cmd', '/c', "$distributionBinPath/ballerina.bat test --code-coverage --all ${debugParams} && exit %%ERRORLEVEL%%"
//            } else {
//                commandLine 'sh', '-c', "$distributionBinPath/ballerina test  --code-coverage --all ${debugParams}"
//            }
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat test  ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal test  ${debugParams}"
            }
        }
    }
}

test {
    dependsOn(ballerinaTest)
//    dependsOn(ballerinaIntegrationTests)
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("${buildDir}/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/ballerina-openapi")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

ballerinaBuild.dependsOn ":openapi-cli:build"
ballerinaBuild.dependsOn ":openapi-validator:build"
unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlFile.dependsOn copyStdlibs
ballerinaBuild.dependsOn updateTomlFile
build.dependsOn(ballerinaBuild)
