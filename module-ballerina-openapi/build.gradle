/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
description = 'Ballerina - OpenAPI Ballerina Generator'

configurations {
    jbalTools
}

dependencies {
    jbalTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    implementation project(':openapi-validator')
    implementation project(':openapi-cli')
}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

def packageName = "openapi"
def packageOrg = "ballerina"
//def platform = "java11"
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaCompileConfigFile = new File("$project.projectDir/CompilerPlugin.toml")
def targetNativeJar = file("""$project.rootDir/${packageName}-validator/build/libs/${packageName}-validator-${project.version}.jar""")
def targetOpenApiCliJar = file("$project.rootDir/openapi-cli/build/libs/openapi-cli-${project.version}.jar")
def distributionPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
def distributionBinPath = distributionPath + "/bin"
def originalConfig = ballerinaConfigFile.text
def originalCompilerConfig = ballerinaCompileConfigFile.text
def artifactTestableJar = file("$project.projectDir/target/cache/${packageOrg}/${packageName}/${tomlVersion}/any/")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')

apply plugin: 'io.ballerina.plugin'

ballerina {
    packageOrganization = packageOrg
    module = packageName
    langVersion = ballerinaLangVersion
//    testCoverageParam = "--code-coverage --jacoco-xml --includes=org.ballerinalang.net.*:ballerina.http.*"
}

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

task updateTomlFile {
    doLast {
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        ballerinaConfigFile.text = newConfig
    }
}

task updateCompilerTomlFile {
    doLast {
        def stdlibDependentIoVersion = stripBallerinaExtensionVersion(project.stdlibIoVersion)
        def stdlibDependentLogVersion = stripBallerinaExtensionVersion(project.stdlibLogVersion)

        def newConfig = ballerinaCompileConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        newConfig = newConfig.replace("@stdlib.io.version@", stdlibDependentIoVersion)
        newConfig = newConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        ballerinaCompileConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaCompileConfigFile.text = originalCompilerConfig
    }
}
//Ballerina gradle plugin
buildscript {
    repositories {
        maven {
            url = 'https://maven.pkg.github.com/ballerina-platform/plugin-gradle'
            credentials {
                username System.getenv("packageUser")
                password System.getenv("packagePAT")
            }
        }
    }
    dependencies {
        classpath "io.ballerina:plugin-gradle:${project.ballerinaGradlePluginVersion}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/ballerina-openapi")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

updateTomlFile.dependsOn copyStdlibs
updateCompilerTomlFile.dependsOn updateTomlFile

ballerinaBuild.dependsOn ":${packageName}-cli:build"
ballerinaBuild.dependsOn ":${packageName}-validator:build"
ballerinaBuild.dependsOn updateCompilerTomlFile
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.finalizedBy revertTomlFile
build.dependsOn ballerinaBuild

publishToMavenLocal.dependsOn build
publish.dependsOn build
